// Defining functions
def replaceInString:(String str) word:(String) with:(String) -> Bool
    def writeMessage:(String msg) -> Void
        def actuallyPrint:(String it) -> Void
            [println: it]
        end

        [actuallyPrint: msg]
    end

    [writeMessage: [str stringAfterReplacing: word with: with]]

    return true
end

let result: Any?
result = [replaceInString: "Hello, world!" word: "world" with: "Coal"]

[println: ["The call returned: " concat: result]]


// Conditionals
let test: Any?
// test = true
test = 42
// test = 43

if test == true do
    [println: "It's the truth!"]
elif test == 42 do
    [println: "It's the meaning of life!"]
elif test > 42 do
    [println: "It's more than the meaning of life!"]
else
    [println: "It's a lie!"]
end


// Iterable objects
let fruits: List = ("Apple", "Banana")
let more_fruits: List = (fruits, "Cocoa", "Melon", "Peach")
let bla_bla: List = (0, 1, more_fruits)

[println: fruits]
[println: fruits{1}]

[println: more_fruits]
[println: more_fruits{0}]
[println: more_fruits{0}{1}]

let a_list: List = (0, 1, 2, 3, 4, 5)

[println: a_list]

a_list{2} = "Two"
[println: a_list]

let other_list: List = (6, 7, 8, 9)
[a_list update: other_list]
[println: a_list]

[println: a_list{2,-1}]


// Loops
let colors: List = ("red", "yellow", "brown", "green", "yellow")
let fruits: List = ("apple", "banana", "coconut", "melon", "peach")

let items: List?

for 0, [fruits length] - 1 -> i
    items = (colors{i}, fruits{i})

    if i == 0 do
        [print: ["I have a {} {}, " format: items]]
    elif i < [fruits length] - 1 do
        [print: ["a {} {}, " format: items]]
    else
        [println: ["and I have a {} {}, too." format: items]]
    end
end

// Instead of using
//  for 0, [fruits length] - 1 -> i
// You can feed a range to "each" using
//  each [fruits iterate] -> i

each [fruits iterate] -> i
    items = (colors{i}, fruits{i})

    if i == 0 do
        [print: ["I have a {} {}, " format: items]]
    elif i < [fruits length] - 1 do
        [print: ["a {} {}, " format: items]]
    else
        [println: ["and I have a {} {}, too." format: items]]
    end
end
